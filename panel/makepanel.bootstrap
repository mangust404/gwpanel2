<?php

include_once(dirname(__FILE__) . '/../lib/JSMin.php');
include_once(dirname(__FILE__) . '/../lib/class.JavaScriptPacker.php');


ini_set('display_errors', 'off');

$modules = array();
function module_implements($method) {
  global $modules;
  $result = array();
  
  foreach($modules as $module) {
    if(function_exists($module . '_' . $method)) {
      $result[] = $module;
    }
  }
  return $result;
}

function url($path) {
  return 'http://gwpanel.org/' . $path;
}


/// путь к корню gwpanel
$gwpanel_path = realpath(dirname(__FILE__) . '/..');

$domain = 'gwpanel.org';
$path = '/panel2';


/// Жёстко подключаемые библиотеки, необходимые для запуска
$libs = array('jquery.min.js');

function get_env() {
  $env = 'production';

  global $argc, $argv;
  for($i = 0; $i < $argc; $i++) {
    if($argv[$i] == '--env') {
      $env = trim($argv[$i + 1], ' "\'');
    }
  }
  if(!in_array($env, array('production', 'deploy'))) {
    die("Возможные варианты для --env: production, deploy\n");
  }
  return $env;
}

function get_message() {
  $message = '';

  global $argc, $argv;
  for($i = 0; $i < $argc; $i++) {
    if($argv[$i] == '-m') {
      $message = trim($argv[$i + 1], ' "\'');
    }
  }
  return $message;
}

function package_path($version, $env = 'production') {
  global $gwpanel_path;
  $result = $gwpanel_path . '/panel/' . $env;
  $str_v = strval($version);
  for($i = 0; $i < strlen($str_v); $i++) {
    $result .= '/' . $str_v{$i};
  }
  $result .= '/' . $str_v . '.package.js';
  return $result;
}
/// Определяем последнюю версию
if(file_exists($gwpanel_path . '/version')) {
  $version = intval(file_get_contents($gwpanel_path . '/version'));
  $current_package = package_path($version, get_env());
} else {
  $version = 0;
}

$restircted_libs = array('jquery.js', 'jquery.min.js', 'jquery.db.js', 
  'jquery.db.min.js', 'jquery.indexeddb.js', 'jquery.indexeddb.min.js');

$plugins = array();
/// Подготовка генерации пакета с исходниками
/// Получаем список файлов
$files = array();
$modules = array();

foreach(glob($gwpanel_path . '/*', GLOB_ONLYDIR) as $glob_path) {
  $dirname = basename($glob_path);
  if($dirname == 'themes' || $dirname == 'img' || $dirname == 'example') {
    continue;
  }
  foreach(glob($gwpanel_path . '/' . $dirname . '/*.js') as $file) {
    $filename = basename($file);
    if($dirname == 'lib' && (in_array($filename, $libs) || 
                             in_array($filename, $restircted_libs))) {
      /// пропускаем жёстко подключаемые библиотеки
      continue;
    }
    if($dirname == 'server') continue;
    $files[] = $file;
  }
  if($dirname == 'lib') {
    foreach(glob($gwpanel_path . '/' . $dirname . '/tests/*.js') as $file) {
      $files[] = $file;
    }
  }
  if(file_exists($glob_path . '/' . $dirname . '.module.json')) {
    $modules[] = $dirname;

    $data = json_decode(file_get_contents($glob_path . '/' . $dirname . '.module.json'), TRUE);
    if($data) {
      $plugins[$dirname] = $data;
    } else {
      print "ERROR!!! Bad json syntax in $module/$module.module.json\n";
      exit;
    }
  }
}
$files[] = $gwpanel_path . '/apply.js';

/// Файлы тем
foreach(explode("\n", shell_exec('find ' . $gwpanel_path . '/themes/ -type f -name *.css')) as $css_path) {
  if($css_path) $css_files[] = $css_path;
}

/// CSS файлы в lib/
foreach(explode("\n", shell_exec('find ' . $gwpanel_path . '/lib/ -type f -name *.css')) as $css_path) {
  if($css_path) $css_files[] = $css_path;
}

/// делаем apply-файл
function _element_sort($a, $b) {
  $a_weight = (is_array($a) && isset($a['#weight'])) ? $a['#weight'] : 0;
  $b_weight = (is_array($b) && isset($b['#weight'])) ? $b['#weight'] : 0;
  if ($a_weight == $b_weight) {
    return 0;
  }
  return ($a_weight < $b_weight) ? -1 : 1;
}


$apply_pages = $apply_scripts = $apply_events = $apply_settings = array();
uasort($plugins, '_element_sort');

$tests = array();
$widget_classes = $button_classes = $module_info = array();

foreach($plugins as $plugin_name => $plugin) {
  if(is_array($plugin['apply'])) {
    foreach($plugin['apply'] as $page => $scripts) {
      if(!is_array($scripts)) continue;
      if(!isset($apply_pages[$page])) $apply_pages[$page] = array();
      $apply_pages[$page] = array_merge($apply_pages[$page], $scripts);
    }
    //$apply_scripts[$plugin_name] = $plugin['applyScript'];
  }
  if(isset($plugin['event'])) {
    foreach($plugin['event'] as $event => $listener) {
      if(!isset($apply_events[$event])) $apply_events[$event] = array();
      $listener['event'] = $event;
      $apply_events[$event][] = $listener;
      $apply_scripts[$listener['callback']] = $plugin_name . '/' . $listener['file'];
    }
  }

  if(isset($plugin['settings']) && is_array($plugin['settings'])) {
    foreach($plugin['settings'] as $key => $val) {
      if(!isset($plugin['settings'][$key]['module'])) {
        $plugin['settings'][$key]['module'] = $plugin_name;
      }
    }
    $apply_settings= array_merge($apply_settings, $plugin['settings']);
  }  

  if(isset($plugin['buttons']) && is_array($plugin['buttons'])) {
    foreach($plugin['buttons'] as $type => $button) {
      $button['module'] = $plugin_name;
      $button_classes[$plugin_name . '_' . $type] = $button;
    }
  }

  if(isset($plugin['widgets']) && is_array($plugin['widgets'])) {
    foreach($plugin['widgets'] as $type => $widget) {
      $widget['module'] = $plugin_name;
      $widget_classes[$plugin_name . '_' . $type] = $widget;
    }
  }

  foreach(glob(realpath(dirname(__FILE__) . '/../' . $plugin_name) . '/*_test.js') as $_file) {
    $tests[] = $plugin_name . '/' . basename($_file);
  }

  $module_info[$plugin_name] = array(
    'title' => isset($plugin['title'])? $plugin['title']: $plugin_name,
    'description' => isset($plugin['description'])? $plugin['description']: '',
  );
}

$themes = array();
foreach(glob($gwpanel_path . '/themes/*', GLOB_ONLYDIR) as $theme_path) {
  $theme_name = basename($theme_path);
  if($theme_name{0} == '.') continue;
  try {
    $theme = json_decode(file_get_contents($theme_path . '/theme.json'), TRUE);
    if(!$theme) continue;
    if(!isset($theme['icons'])) $theme['icons'] = array();
    foreach(glob($theme_path . '/icons/*') as $icon) {
      $icon_name = basename($icon);
      $ar = explode('.', $icon_name);
      end($ar);
      $ext = strtolower(current($ar));
      if(in_array($ext, array('png', 'gif', 'jpg', 'jpeg'))) {
        array_unshift($theme['icons'], $icon_name);
      }
    }
    $themes[$theme_name] = $theme;
  } catch(Exception $e) {
    continue;
  }
}


$apply = array();
$apply['pages'] = $apply_pages;
$apply['scripts'] = $apply_scripts;
$apply['settings'] = $apply_settings;
$apply['events'] = $apply_events;
$apply['widgets'] = $widget_classes;
$apply['buttons'] = $button_classes;
$apply['modules'] = $module_info;
$apply['themes'] = $themes;

global $gwpanel_path;
file_put_contents($gwpanel_path . '/apply.js', 
  'window.panel_apply = ' . json_encode($apply) . ';
window.panel_tests = ' . json_encode($tests) . ';');

if(get_env() == 'production') {
  $package = array();
  foreach($files as $file) {
    $name = substr($file, strlen($gwpanel_path) + 1);
    //if(strpos($file, '.min.') === FALSE) {
    //  $packer = new JavaScriptPacker(file_get_contents($file));
    //  $package[$name] = $packed = $packer->pack();
    //} else {
      $package[$name] = JSMin::minify(file_get_contents($file));
    //}
  }

  foreach($css_files as $file) {
    $contents = file_get_contents($file);
    $filepath = dirname(substr($file, strlen($gwpanel_path) + 1));
    if(preg_match_all('/url\(([^\)]+)\)/i', $contents, $matches)) {
      foreach($matches[1] as $url) {
        if(strpos($url, 'http') === FALSE) {
          $contents = str_replace('url(' . $url . ')', 'url(' . url('panel2/' . $filepath) . '/' . $url . ')', $contents);
        }
      }
    }
    $data = $contents;
    $regexp = '/@import[^;]+;/i';
    preg_match_all($regexp, $data, $matches);
    $data = preg_replace($regexp, '', $data);
    $data = implode('', $matches[0]) . $data;

    // Remove comments
    $data = preg_replace('!/\*[^*]*\*+([^/][^*]*\*+)*/!', '', $data);

    // Remove space after colons
    $data = str_replace(': ', ':', $data);

    // Remove whitespace
    $data = str_replace(array("\r\n", "\r", "\n", "\t" ), '', $data);
    $data = preg_replace('/[ ]{2,}/m', ' ', $data);

    while(strpos($data, '  ') !== FALSE) {
      $data = str_replace('  ', ' ', $data);
    }

    $package[$filepath . '/' . basename($file)] = $data;
  }

  file_put_contents('/tmp/package.js', 'window.__package=' . json_encode($package));


  if(!$version || !file_exists($current_package) || strlen(shell_exec('diff /tmp/package.js ' . $current_package)) > 1) {
    /// Файлов нет, либо файлы различаются, делаем новую сборку
    $message = get_message();
    if(!strlen($message)) die("Не указано сообщение сборки. Используйте ключ -m \"СООБЩЕНИЕ\"\n");
    $version++;
    $new_package = package_path($version);

    $notes_path = dirname($new_package) . '/' . $version . '.notes.js';

    mkdir(dirname($new_package), 0755, TRUE);
    shell_exec('mv /tmp/package.js ' . $new_package);

    print "Записан файл пакета {$new_package}\n";

    /// Определяем последнюю миграцию, и если найдены новые файлы миграции, то добавляем в notes последнюю миграцию
    if(file_exists($gwpanel_path . '/migrate')) {
      $migrate = intval(file_get_contents($gwpanel_path . '/migrate'));
    } else {
      $migrate = 0;
    }
    $migrate_str = '';
    $new_migrate = $migrate;
    foreach(glob($gwpanel_path . '/panel/migration/*.js') as $migration_file) {
      list($num, $ext) = explode('.', basename($migration_file));
      $num = intval($num);
      if($num > 0 && $num > $migrate) {
        /// добавляем содержимое файла в миграцию
        $migrate_str .= "\n" . file_get_contents($migration_file);
        $new_migrate = $num;
      }
    }
    file_put_contents($gwpanel_path . '/migrate', strval($new_migrate));

    file_put_contents($notes_path, 'window.panel_release_notes = window.panel_release_notes || {};
window.panel_release_date = window.panel_release_date || {};
window.panel_release_notes[' . $version . '] = ' . json_encode($message) . '; window.panel_release_date[' . $version . '] = "' . date('c') . '";' . $migrate_str);
    print "Записан файл заметок к версии $notes_path\n";
    file_put_contents($gwpanel_path . '/version', $version);
    print "Записан файл версии {$gwpanel_path}/version\n";

    file_put_contents($gwpanel_path . '/version_production.js', 'window.current_panel_version = ' . $version);
    print "Записан файл версии для клиентов $gwpanel_path/version_" . get_env() . ".js\n";
    file_put_contents($gwpanel_path . '/version_deploy.js', 'window.current_panel_version = ' . $version);

  } else {
    unlink('/tmp/package.js');
    print "Скрипты не отличаются от текущих, новой версии создано не будет\n";
  }
}

/// Подготовка bootstrap.js
$bootstrap = '

(function() {
  if(location.pathname == "/b0/btk.php") return;

  var panelURL = "http://' . $domain . $path . '";
  var environment = document.cookie.match(/gwp2_e=([a-z]+)/)? RegExp.$1: null;

  if(environment == "dev") return;
  var package;

  var libs = ' . json_encode($libs) . ';
  var loadedLibs = 0;

  var testing = location.search.indexOf(\'gwpanel_test\') != -1 && location.search.indexOf(\'continue\') == -1;

  var $indexeddb, $websql;

  if(testing) libs.push(\'qunit-1.15.0.js\');

  for(var i = 0; i < libs.length; i++) {
    var s = document.createElement("script");
    s.type = "text/javascript";
    if((libs[i] == "jquery.min.js" || libs[i] == "jquery.js") && 
      window.jQuery) {
      libs.splice(i, 1);
      if(libs.length == 0) setTimeout(function() {
        initDB();
      }, 1);
      continue;
    }
    s.src = panelURL + "/lib/" + libs[i];
    s.addEventListener("load", function() {
      loadedLibs++;
      if(loadedLibs >= libs.length) {
        initDB();
      }
    })
    document.getElementsByTagName("head")[0].appendChild(s);
  }

  var initDB = function() {
    var s = document.createElement("script");
    s.type = "text/javascript";
    if(window.indexedDB) {
      s.src = panelURL + "/lib/jquery.indexeddb" + 
        (environment == "production" && false? ".min": "") + ".js";
    } else if(window.openDatabase) {
      s.src = panelURL + "/lib/jquery.db" + 
      (environment == "production"? ".min": "") + ".js";
    } else {
      alert("' . iconv('UTF-8', 'CP1251', 'Извините, ваш браузер не поддерживается, т.к. в нём отсутствует поддержка базы данных.\nРекомендуемые браузеры: Firefox, Chrome, Opera, Safari последних версий.') . '");
    }
    s.addEventListener("load", function() {
      if(window.indexedDB) {
        $indexeddb = jQuery.indexedDB("gwp2", {
          "schema": {
            "1": function(versionTransaction){
              versionTransaction.createObjectStore("packages");
            }
          }
        });
      } else if(window.openDatabase) {
        $websql = jQuery.db("gwp2", "1.0", "GWPanel 2 database", 1024 * 1024 * 15);
        $websql.tables(function(tables) {
          if(tables.indexOf("packages") == -1) {
            $websql.createTable({
                name: "packages",
                columns: ["version INTEGER PRIMARY KEY", "value TEXT"],
                done: function () {},
                fail: function () {
                  console.log("error while creating table");
                }
            });
          }
        });
      }
      initialize();
    })
    document.getElementsByTagName("head")[0].appendChild(s);
  }

  var getDB = function(version, callback, failover) {
    if($indexeddb) {
      $indexeddb.transaction(["packages"]).then(function(result){
      }, function(){
        failover();
      }, function(t) {
        t.objectStore("packages").get(version).then(function(result) {
          if(jQuery.type(result) == "object" && 
             jQuery.type(result["panel/panel.js"]) == "string") {
            /// В хранилище есть этот пакет, ничего грузить не надо
            callback(result);
          } else {
            failover();
          }
        });
      });
    } else if($websql) {
      $websql.criteria("packages").add(jQuery.db.restriction.eq("version", version)).list(
        function (transaction, results) {
          if(results.rows.length == 1) {
            var result = JSON.parse(results.rows.item(0).value);
            if(jQuery.type(result) == "object" && 
               jQuery.type(result["panel/panel.js"]) == "string") {
              /// В хранилище есть этот пакет, ничего грузить не надо
              return callback(result);
            }
          }
          failover();
        },
        function (transaction, error) {
          failover();
        }
      );
    }
  }

  var setDB = function(version, __package, callback) {
    if($indexeddb) {
      $indexeddb.transaction(["packages"]).then(function(result){
        callback();
      }, function(){
      }, function(t) {
        t.objectStore("packages").add(package, version);
      });
    } else if($websql) {
      $websql.insert("packages", {
          data: {
              version: version,
              value: JSON.stringify(__package)
          },
          done: function () {
              callback();
          }
      });
    }
  }

  var initialize = function() {
    if(!environment) {
      var myDate = new Date();
      myDate.setMonth(myDate.getMonth() + 120);
      document.cookie = "gwp2_e=production;expires=" + myDate 
                     + ";domain=.ganjawars.ru;path=/";
    }
    if(environment == "dev") {
      return;
    }
    environment = (["production", "deploy"]).indexOf(environment) == -1? "production": environment;
    var ar = document.cookie.match(/gwp2_v=([0-9]+)/);
    var panel_version = ar? parseInt(ar[1]): null;

    /// Получение пакета указанной версии с сервера или из локального хранилища
    window.__checkoutPackage = function(package_version, callback) {
      if(environment == "deploy") {
        callback(package);
        return;
      }
      if(String(typeof(package)).toLowerCase() == "object") {
        callback(package);
        return;
      }
      function download() {
        /// В хранилище нет пакета или он повреждён, грузим с сервера
        var path = panelURL + "/panel/" + environment;
        str_version = String(package_version);
        for(var i = 0; i < str_version.length; i++) {
          path += "/" + str_version.charAt(i);
        }
        path += "/" + str_version + ".package.js";
        var s = document.createElement("script");
        s.type = "text/javascript";
        s.src = path;
        s.addEventListener("load", function() {
          if(!window.__package) {
            /// TODO отработать отправку ошибки и возврат на предыдущую версию
            throw("Повреждён файл пакета " + path);
          }
          package = window.__package;

          setDB(package_version, package, function() {
            callback(package);
          });
        }, false);
        document.getElementsByTagName("head")[0].appendChild(s);        
      }

      getDB(package_version, function(result) {
        package = result;
        callback(package);
      }, download);
    }

    function __checkoutVersion(callback) {
      var s = document.createElement("script");
      s.type = "text/javascript";
      s.src = panelURL + "/version_" + environment + ".js?_" + (new Date).getTime();
      s.addEventListener("load", function() {
        panel_version = window.current_panel_version;
        var myDate = new Date();
        myDate.setMonth(myDate.getMonth() + 120);
        document.cookie = "gwp2_v=" + panel_version + ";expires=" + myDate 
                       + ";domain=.ganjawars.ru;path=/";
        callback(panel_version);
      }, false);
      document.getElementsByTagName("head")[0].appendChild(s);
    }

    window.__loadCSS = function(path, callback, failover) {
      if(String(typeof(path)).toLowerCase() == "string") {
        path = [path];
      }
      var loaded = 0;
      for(var i = 0; i < path.length; i++) {
        if(environment == "deploy") {
          /// Решение взято с http://www.yearofmoo.com/2011/03/cross-browser-stylesheet-preloading.html
          var link = document.createElement(\'link\');
          link.type = \'text/css\';
          link.rel = \'stylesheet\';
          link.id = \'css-preload-\' + path[i].replace(/[^a-z0-9]+/g, \'-\') + (new Date().getTime());
          link.href = panelURL + "/" + path[i] + "?" + panel_version;

          document.getElementsByTagName(\'head\')[0].appendChild(link);

          if(navigator.userAgent.indexOf(\'MSIE\') != -1 || 
            (window.opera && window.opera.version() > 13)) {
            link.onload = callback;
            link.onerror = failover;
          } else {
            var counter = 0;
            var check = function() {
              var target = document.getElementById(link.id);
              if(target.sheet) {
                var stylesheets = document.styleSheets;
                for(var i = 0; i < stylesheets.length; i++) {
                  var file = stylesheets[i];
                  var owner = file.ownerNode ? file.ownerNode : file.owningElement;
                  if(owner && owner.id == link.id) {
                    loaded++;
                    if(loaded >= path.length && callback) {
                      callback();
                    }
                    return;
                  }

                  if(counter++ > 10) {
                    if(failover) failover();
                    return;
                  }
                }
              }

              setTimeout(check, 10);
            }
            check();
          }
          document.getElementsByTagName(\'head\')[0].appendChild(link);
        } else {
          if(localStorage["gwp2_f_" + path[i]]) {
            css = localStorage["gwp2_f_" + path[i]];
            if(typeof(css) != undefined && css.length) {
              jQuery("<style type=\'text/css\'></style>").html(css).attr("gwpanel", true).appendTo("head");
              loaded++;
              if(callback && loaded == path.length) setTimeout(callback, 1);
            } else {
              if(failover) failover();
            }
          } else {
            __checkoutPackage(panel_version, function(package) {
              if(typeof(package[path[i]]) != undefined && package[path[i]].length) {
                localStorage["gwp2_f_" + path[i]] = package[path[i]];
                jQuery("<style type=\'text/css\'></style>").html(package[path[i]]).attr("gwpanel", true).appendTo("head");
                loaded++;
                if(callback && loaded == path.length) setTimeout(callback, 1);
              } else {
                if(failover) failover();
              }
            });
          }
        }
      }
    }

    window.__loadScript = function(path, callback, failover) {
      if(String(typeof(path)).toLowerCase() == "string") {
        path = [path];
      }
      var loaded = 0;
      for(var i = 0; i < path.length; i++) {
        if(environment == "deploy") {
          var s = document.createElement("script");
          s.type = "text/javascript";
          s.charset="UTF-8";
          s.src = panelURL + "/" + path[i] + "?" + panel_version;
          s.addEventListener("load", function() {
            loaded++;
            if(loaded >= path.length && callback) {
              callback();
            }
          }, false);
          var stack = (new Error).stack;
          s.addEventListener("error", failover, false);
          document.getElementsByTagName("head")[0].appendChild(s);
        } else {
          if(localStorage["gwp2_f_" + path[i]]) {
            try {
              eval.apply(window, [localStorage["gwp2_f_" + path[i]]]);
              loaded++;
              if(callback && loaded >= path.length) callback();
            } catch(e) {
              loaded++;
              if(failover) failover(e);
            }
          } else {
            __checkoutPackage(panel_version, function(package) {
              if(typeof(package[path[i]]) == "undefined") {
                if(failover) failover();
                return;
              }
              localStorage["gwp2_f_" + path[i]] = package[path[i]];
              try {
                eval.apply(window, [package[path[i]]]);
                loaded++;
                if(callback && loaded >= path.length) callback();
              } catch(e) {
                loaded++;
                if(failover) failover(e);
              }
            });
          }
        }
      }
    }

    window.__clearCache = function() {
      __checkoutPackage(panel_version, function(package) {
        for(var key in package) {
          localStorage.removeItem("gwp2_f_" + key);
        }
        localStorage.removeItem("gwp2_package_" + panel_version);
      });
    }

    var panelInitFunc = function(version) {
      window.__checkoutPackage(version, function(package) {
        window.__loadScript(["lib/settings.js", 
                              "panel/panel.js", 
                              "lib/crosswindow.js", 
                              "apply.js"], function() {
          window.__panel = new window.Panel2(environment, panelURL);
          window.__panel.init();
        }, function() {
          if(confirm("' . iconv('UTF-8', 'CP1251', 'Упс. Кажется в версии GWPanel, которая у вас сейчас сохранена, произошла какая-то ошибка.\n Скорее всего она уже исправлена, надо просто обновиться. Вы хотите попробовать это сделать?') . '")) {
            var myDate = new Date();
            document.cookie = "gwp2_v=0;expires=" + myDate
                       + ";domain=.ganjawars.ru;path=/";
 
          }
        });
      });
    }

    if(!isNaN(panel_version) && panel_version > 0) {
      panelInitFunc(panel_version);
    } else {
      __checkoutVersion(panelInitFunc);
    }
  }
})();
';

file_put_contents($gwpanel_path . '/bootstrap.js', $bootstrap);
print 'Bootstrap written to ' . $gwpanel_path . '/bootstrap.js' . "\n";

$bootstrap_container = '

(function() {
  var panelURL = "http://' . $domain . $path . '";

  var package;

  var libs = ' . json_encode($libs) . ';
  var loadedLibs = 0;

  for(var i = 0; i < libs.length; i++) {
    var s = document.createElement("script");
    s.type = "text/javascript";
    s.src = panelURL + "/lib/" + libs[i];
    s.addEventListener("load", function() {
      loadedLibs++;
      if(loadedLibs >= libs.length) {
        initialize();
      }
    })
    document.getElementsByTagName("head")[0].appendChild(s);
  }

  var initialize = function() {
    var s = document.createElement("script");
    s.type = "text/javascript";
    s.src = panelURL + "/lib/crossclient.js";
    document.getElementsByTagName("head")[0].appendChild(s);
  }
})();
';

file_put_contents($gwpanel_path . '/bootstrap_container.js', $bootstrap_container);
print 'Bootstrap container written to ' . $gwpanel_path . '/bootstrap_container.js' . "\n";

//создаём список файлов для синхронизации с ганей
shell_exec('/usr/bin/find ./ ! \( -iwholename *\.git* \) ! \( -iwholename "\./doc/*" \) ! \( -iwholename "\./server/*" \) ! \( -iname version \) -regextype posix-egrep -regex ".*\.(js|css|png|gif)"  -type f | /usr/bin/sort | /bin/gzip > ' . $gwpanel_path . '/package.gz');
