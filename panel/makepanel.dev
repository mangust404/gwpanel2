<?php
/*
GWPanel, a user scripts pack for online game GanjaWars.ru
Copyright (C) 2008-2010  Riki_tiki_tavi <mangust404@gmail.com>

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.

*/

/** ВНИМАНИЕ! 
Локальный запуск тестировался и работает (скорее всего) только в Firefox!

Для работы с локальной машины вам нужно в вашем профайле Firefox создать
скрипт user.js и добавить туда следующие три строчки:

user_pref("capability.policy.policynames", "localfilelinks");
user_pref("capability.policy.localfilelinks.sites", "http://www.ganjawars.ru http://ganjawars.ru http://quest.ganjawars.ru http://bank.ganjawars.ru");
user_pref("capability.policy.localfilelinks.checkloaduri.enabled", "allAccess");

Иначе по соображениям безопасности Firefox тупо не будет подгружать локальные файлы.

В Windows профайл обычно лежит здесь:
C:\Documents and settings\%username%\Application Data\Mozilla\Firefox\Profiles\имя профайла.default

В Linux профайл лежит:
~/.mozilla/firefox/имя профайла.default

*/

ini_set('display_errors', 'on');
error_reporting(E_ALL);

/// путь к корню gwpanel
$gwpanel_path = realpath(dirname(__FILE__) . '/..');
/// Фикс для винды
$gwpanel_path = str_replace('\\', '/', $gwpanel_path);
if(strpos($gwpanel_path, 'file:///') === FALSE) {
  $gwpanel_path = str_replace('file://', 'file:///', $gwpanel_path);
}

function _element_sort($a, $b) {
  $a_weight = (is_array($a) && isset($a['weight'])) ? $a['weight'] : 0;
  $b_weight = (is_array($b) && isset($b['weight'])) ? $b['weight'] : 0;
  if ($a_weight == $b_weight) {
    return 0;
  }
  return ($a_weight < $b_weight) ? -1 : 1;
}

/// Получаем список модулей
$modules = array();
foreach(glob($gwpanel_path . '/*', GLOB_ONLYDIR) as $path) {
  $name = basename($path);
  if($name == 'lib' || $name == 'themes' || $name == 'img' || !file_exists($gwpanel_path . '/' . $name . '/' . $name . '.module.json')) {
    continue;
  }
  
  $modules[] = $name;
}

function panel_standalone_local() {
  global $gwpanel_path;

  $localURL = 'file://' . $gwpanel_path;
  if(strpos($localURL, 'file:///') === FALSE) {
    $localURL = str_replace('\\', '/', $localURL);
    $localURL = str_replace('file://', 'file:///', $localURL);
  }
  
  $apply_pages = $apply_scripts = $apply_events = $apply_settings = array();
  /// Получаем данные модулей
  $plugins = array();
  global $modules;
  foreach($modules as $i => $module) {
    if(file_exists($gwpanel_path . '/' . $module . '/' . $module . '.module.json')) {
      $data = json_decode(file_get_contents($gwpanel_path . '/' . $module . '/' . $module . '.module.json'), TRUE);
      if($data) {
        $plugins[$module] = $data;
      } else {
        print "ERROR!!! Bad json syntax in $module/$module.module.json\n";
        exit;
      }
    }
  }
  uasort($plugins, '_element_sort');

  $tests = array();
  $widget_classes = $button_classes = $module_info = array();

  foreach($plugins as $plugin_name => $plugin) {
    if(is_array($plugin['apply'])) {
      foreach($plugin['apply'] as $page => $scripts) {
        if(!is_array($scripts)) continue;
        if(!isset($apply_pages[$page])) $apply_pages[$page] = array();
        $apply_pages[$page] = array_merge($apply_pages[$page], $scripts);
      }
      //$apply_scripts[$plugin_name] = $plugin['applyScript'];
    }
    if(isset($plugin['event']) && is_array($plugin['event'])) {
      foreach($plugin['event'] as $event => $listener) {
        if(!isset($apply_events[$event])) $apply_events[$event] = array();
        $listener['event'] = $event;
        $apply_events[$event][] = $listener;
        $apply_scripts[$listener['callback']] = $plugin_name . '/' . $listener['file'];
      }
    }

    if(isset($plugin['settings']) && is_array($plugin['settings'])) {
      foreach($plugin['settings'] as $key => $val) {
        if(!isset($plugin['settings'][$key]['module'])) {
          $plugin['settings'][$key]['module'] = $plugin_name;
        }
      }
      $apply_settings= array_merge($apply_settings, $plugin['settings']);
    }

    if(isset($plugin['buttons']) && is_array($plugin['buttons'])) {
      foreach($plugin['buttons'] as $type => $button) {
        $button['module'] = $plugin_name;
        $button['weight'] = isset($plugin['weight'])? $plugin['weight']: 0;
        $button_classes[$plugin_name . '_' . $type] = $button;
      }
    }

    if(isset($plugin['widgets']) && is_array($plugin['widgets'])) {
      foreach($plugin['widgets'] as $type => $widget) {
        $widget['module'] = $plugin_name;
        $widget['weight'] = isset($plugin['weight'])? $plugin['weight']: 0;
        $widget_classes[$plugin_name . '_' . $type] = $widget;

      }
    }

    foreach(glob(realpath(dirname(__FILE__) . '/../' . $plugin_name) . '/*_test.js') as $_file) {
      $tests[] = $plugin_name . '/' . basename($_file);
    }

    $module_info[$plugin_name] = array(
      'title' => isset($plugin['title'])? $plugin['title']: $plugin_name,
      'description' => isset($plugin['description'])? $plugin['description']: '',
      'weight' => isset($plugin['weight'])? $plugin['weight']: 0,
    );
  }
  
  $themes = array();
  foreach(glob($gwpanel_path . '/themes/*', GLOB_ONLYDIR) as $theme_path) {
    $theme_name = basename($theme_path);
    if($theme_name{0} == '.') continue;
    try {
      $theme = json_decode(file_get_contents($theme_path . '/theme.json'), TRUE);
      if(!$theme) continue;
      if(!isset($theme['icons'])) $theme['icons'] = array();
      foreach(glob($theme_path . '/icons/*') as $icon) {
        $icon_name = basename($icon);
        $ar = explode('.', $icon_name);
        end($ar);
        $ext = strtolower(current($ar));
        if(in_array($ext, array('png', 'gif', 'jpg', 'jpeg'))) {
          array_unshift($theme['icons'], $icon_name);
        }
      }
      $themes[$theme_name] = $theme;
    } catch(Exception $e) {
      continue;
    }
  }
  //print_r($apply);
  $options['browsers'] = array(
    'firefox' => 3.0,
    'opera' => 9.52, 
  );
  $apply = array();
  $apply['pages'] = $apply_pages;
  $apply['scripts'] = $apply_scripts;
  $apply['settings'] = $apply_settings;
  $apply['events'] = $apply_events;
  $apply['widgets'] = $widget_classes;
  $apply['buttons'] = $button_classes;
  $apply['modules'] = $module_info;
  $apply['themes'] = $themes;

  global $gwpanel_path;
  file_put_contents($gwpanel_path . '/apply.js', 
    'window.panel_apply = ' . json_encode($apply) . ';
window.panel_tests = ' . json_encode($tests) . ';');
  
  $output = '// ==UserScript==
// @name          GWPanel 2
// @namespace     http://gwpanel.org
// @description      Developement-версия GWPanel 2
// @version       0.0.1

// @include       http://ganjawars.ru/*
// @include       http://*.ganjawars.ru/*
// @exclude       http://chat.ganjawars.ru/*
// @exclude       http://photos.ganjawars.ru/*
// @exclude       http://*.ganjawars.ru/index.php
// @exclude       http://*.ganjawars.ru/login.php
// @exclude       http://ganjawars.ru/login.php
// @exclude       http://*.ganjawars.ru/
// @exclude       http://*.ganjawars.ru/b0/btk.php
';

  $output .= '// ==/UserScript==
try {
  if(unsafeWindow)
    var window = unsafeWindow;
} catch(e) {
  if(window.opera && location.pathname == \'/login.php\') {
    if(document.domain == \'ganjawars.ru\') window.location = \'http://www.ganjawars.ru/login.php\';
    var myform = document.getElementById(\'myform\');
    if(myform && myform.onsubmit) {
      myform.oldonsubmit = myform.onsubmit;
      myform.onsubmit = function() {
        myform.action = myform.action.replace(/www\./, \'\');
      };
    };
  };
};

if(window.location.pathname == "/b0/btk.php") return;

var myDate = new Date();
myDate.setMonth(myDate.getMonth() + 120);
document.cookie = "gwp2_e=dev;expires=" + myDate 
               + ";domain=.ganjawars.ru;path=/";

window.__loadCSS = function(path, callback, failover) {
  if(String(typeof(path)).toLowerCase() == "string") {
    path = [path];
  }
  var loaded = 0;
  for(var i = 0; i < path.length; i++) {
    /// Решение взято с http://www.yearofmoo.com/2011/03/cross-browser-stylesheet-preloading.html
    var link = document.createElement(\'link\');
    link.type = \'text/css\';
    link.rel = \'stylesheet\';
    link.id = \'css-preload-\' + path[i].replace(/[^a-z0-9]+/g, \'-\') + (new Date().getTime());
    link.href = "' . $localURL . '/" + path[i];

    document.getElementsByTagName(\'head\')[0].appendChild(link);

    if(navigator.userAgent.indexOf(\'MSIE\') != -1 || window.opera) {
      link.onload = callback;
      link.onerror = failover;
    } else {
      var counter = 0;
      var check = function() {
        var target = document.getElementById(link.id);
        if(target.sheet) {
          var stylesheets = document.styleSheets;
          for(var i = 0; i < stylesheets.length; i++) {
            var file = stylesheets[i];
            var owner = file.ownerNode ? file.ownerNode : file.owningElement;
            if(owner && owner.id == link.id) {
              loaded++;
              if(loaded >= path.length && callback) {
                setTimeout(callback, 10);
              }
              return;
            }

            if(counter++ > 10) {
              if(failover) failover();
              return;
            }
          }
        }

        setTimeout(check, 10);
      }
      check();
    }
    document.getElementsByTagName(\'head\')[0].appendChild(link);
  }
}

window.__loadScript = function(path, callback, failover) {
  if(!path || !path.length) return;
  if(String(typeof(path)).toLowerCase() != "object" || !path.length) {
    path = [path];
  }
  var loaded = 0;
  for(var i = 0; i < path.length; i++) {
    var s = document.createElement("script");
    s.type = "text/javascript";
    s.charset="UTF-8";
    s.src = "' . $localURL . '/" + path[i];
    s.addEventListener("load", function() {
      loaded++;
      if(loaded >= path.length && callback) {
        callback();
      }
    }, false);
    if(failover) {
      s.addEventListener("error", failover, false);
    }
    document.getElementsByTagName("head")[0].appendChild(s);
  }
};
if(window.chrome) {
  var script  = document.createElement("script");
  script.type = "text/javascript";
  script.charset="UTF-8";
  script.innerHTML = "if(!window.__loadCSS) window.__loadCSS = " + __loadCSS.toString() + "; if(!window.__loadScript) window.__loadScript = " + __loadScript.toString();
  document.getElementsByTagName("head").item(0).appendChild(script);
}

';
  $__options_str = str_replace(array('"true"', '"false"', '"'), array('true', 'false', '\\"'), json_encode($options));
  $__buttons_str = str_replace(array('"true"', '"false"', '"'), array('true', 'false', '\\"'), json_encode($button_classes));
  $__widget_str = str_replace(array('"true"', '"false"', '"'), array('true', 'false', '\\"'), json_encode($widget_classes));
  $output .= 'var __initLibs = "var testing = location.search.indexOf(\'gwpanel_test\') != -1 && location.search.indexOf(\'continue\') == -1; if(window.$) window.old$ = window.$; var libs = [\"jquery\"]; if(testing) libs.push(\"qunit-1.15.0\"); var libsCount = 0; for(var i = 0; i < libs.length; i++) { var s = document.createElement(\"script\"); s.type = \"text/javascript\"; s.addEventListener(\"load\", function() {if(++libsCount >= libs.length) libsLoaded();}, false); s.src = \"' . $localURL . '/lib/\" + libs[i] + \".js\";  s.charset=\"UTF-8\"; document.getElementsByTagName(\"head\")[0].appendChild(s);} var libsLoaded = function() {";

var __initPanel = "var loadedLibs = 0; var _files = [\"lib/settings.js\", \"lib/crosswindow.js\", \"panel/panel.js\", \"apply.js\"]; for(var i = 0; i < _files.length; i++) { var s = document.createElement(\"script\"); s.type = \"text/javascript\"; s.addEventListener(\"load\", function() { if(++loadedLibs >= _files.length) run_panel()}); s.src = \"' . $localURL . '/\" + _files[i];  s.charset=\"UTF-8\"; document.getElementsByTagName(\"head\")[0].appendChild(s); } var run_panel = function() { if(window.old$) window.$ = window.old$; window.__panel = new window.Panel2(\"dev\", \"' . $localURL . '\"); window.__panel.init(); }";
';

/*  foreach(module_implements('panel_standalone') as $module) {
    if(in_array($module, $options['plugins'])) {
      $initModules .= module_invoke($module, 'panel_standalone', $options);
    }
  }
  
  $output .= 'var __initModules = "' . packScript($initModules) . '";
';*/

  $output .= 'var __initClient = "var cls = document.createElement(\"script\"); cls.type = \"text/javascript\"; cls.src = \"' . $localURL . '/lib/crossclient.js\"; cls.charset=\"UTF-8\"; document.getElementsByTagName(\"head\")[0].appendChild(cls); ";
';

  $output .= '

var qunit = document.createElement("div");
qunit.id = "qunit";
document.body.insertBefore(qunit, document.body.firstChild);
var qunit_fixture = document.createElement("div");
qunit_fixture.id = "qunit-fixture";
document.body.insertBefore(qunit_fixture, document.body.firstChild);


var __init = "";
if(location.pathname == "/tmp/panelcontainer.html") {
  __init = __initLibs + __initClient + \'}\'; 
} else {
  __init = __initLibs + __initPanel + \'}\';
}

if(window.chrome) {
  var script  = document.createElement("script");
  script.type = "text/javascript";
  script.innerHTML = __init;
  document.getElementsByTagName("head").item(0).appendChild(script);
} else {
  window.setTimeout(__init, 1)
}

  
';
  return $output;
}

/// Выводим скрипт
$content = panel_standalone_local('', TRUE);

//print $content;
if(file_put_contents($gwpanel_path . '/gwpanel2.user.js', $content)) {
  print 'File written successfully: ' . $gwpanel_path . '/gwpanel2.user.js' . "\n";
}

?>