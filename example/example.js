(function(panel) {
jQuery.extend(panel, {
  example_func2: function(options) {
    //Функция example_func2 вызывается на каждой странице и
    // поскольку у неё нет description в файле example.module.json,
    // то она не может быть отключена или настроена пользователем');
  
  // но она ничего не делает
  },
  example_highlight_players: function(options) {
    // Функция, которая также вызывается на всех страницах
    // для примера мы найдём все ссылки на странице, которые ведут на игроков, 
    // добавим им класс "player-info" и сделаем подсказку при наведении
    // подгружаем CSS со стилями для подсвеченных ссылок и всплывашки
    panel.loadCSS('example/highlight.css');
    // сперва мы находим все A-элементы, href которых начинается на /info.php
    // список всех селекторов вы можете найти тут: http://api.jquery.com/category/selectors/
    jQuery('a[href^="/info.php?id="]')   // - это выражение возвращает jQuery-объект со всеми ссылками
    // затем мы добавляем им класс
    .addClass('player-info')   // благодаря цепочному выполнению после вызова этой функции мы всё ещё имеем исходный объект
    // добавляем всем ссылкам обработчик события "при наведении"
    .hover(function() {
      /// скрываем все видимые всплываки
      jQuery('.player-info-div:visible').hide();

      if(this.$playerInfo) { /// в контексте этого обработчика this - это DOM-объект, объект ссылки, на которую был наведён курсор
        // если мы уже получали данные, то просто выводим их
        this.$playerInfo.show();
      } else {
        // данных нет, мы создаём див и затем аяксом загрузим в него данные
        this.$playerInfo = jQuery('<div class="player-info-div"></div>');
        var that = this; // поскольку ajax-запрос является асинхронным, то функции succes и error
                         // при успешном завершении будут вызываться из хрен знает какого 
                         // контекста, а в контексте нашей уютной ссылки, с которой мы сейчас 
                         // работаем. Чтобы обратиться там к нашей ссылке, мы запоминаем 
                         // this в новую переменую, которая начиная с этого момента будет
                         // доступна и там
        jQuery.ajax({
          url: this.href,
          type: 'GET',
          success: function(data) {
            // data будет содержать в себе голый HTML страницы игрока
            // Кстати если у вас не отключена функция "Гости", то вы будете в списке гостей
            // у просматриваемого вами персонажа.

            // для обработки data и парсинга данных, мы можем задействовать jQuery
            var $data = jQuery(data);
            window.$data = $data;
            var info;
            // преобразовать всё в текст и искать жирной регуляркой боевой, экономический, производственный
            if(info = $data.text().search(/Боевой:[\s]?([0-9]+)[\s]+[\(\)0-9\.\s\+]+(.|\n)Экономический:[\s]?([0-9]+)[\s]+[\(\)0-9\.\s\+]+(.|\n)Производственный:[\s]?([0-9]+)[\s]+/g)) {
              warLevel = RegExp.$1;
              ecoLevel = RegExp.$3;
              workLevel = RegExp.$5;
              that.$playerInfo.append( // append - функция добавления HTML или jQuery объектов в другой jQuery-объект
                jQuery('<dl></dl>')  // мы создаём data list элемент и сразу добавляем в него данные
                  .append('<dt class="war-level">Боевой:</dt>')
                  .append('<dd>' + warLevel + '</dd>')
                  .append('<dt class="war-level">Экономический:</dt>')
                  .append('<dd>' + ecoLevel + '</dd>')
                  .append('<dt class="war-level">Производственный:</dt>')
                  .append('<dd>' + workLevel + '</dd>')
              ).mouseout(function() {
                // когда пользователь уведёт мышку от этого дива, мы должны его спрятать
                jQuery(this).hide();
              }).insertAfter(that); // и наконец, добавляем элемент в DOM сразу за ссылкой
            }
          },
          error: function() {
            // обработчик ошибки. Вполне возможна такая ситуация, когда у человека
            // во время подгрузки данных упал интернет, мы должны обработать эту ситуацию
            that.$playerInfo = false;
            that.$playerInfo.html('Произошла ошибка').show(function() {
              // чтобы при повторном наведении скрипт попытался загрузить ещё раз,
              // затираем $playerInfo для ссылки игрока
              that.$playerInfo = false;
              // кстати этот обработчик вызывается после показа окошка player-info-div
            });
          }
        });
      }
    }); // конец .hover()
  }
});
})(window.__panel);